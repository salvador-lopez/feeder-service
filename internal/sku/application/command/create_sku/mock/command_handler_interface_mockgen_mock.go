// Code generated by MockGen. DO NOT EDIT.
// Source: feeder-service/internal/sku/application/command/create_sku (interfaces: CommandHandlerInterface)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	create_sku "feeder-service/internal/sku/application/command/create_sku"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandHandlerInterface is a mock of CommandHandlerInterface interface.
type MockCommandHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCommandHandlerInterfaceMockRecorder
}

// MockCommandHandlerInterfaceMockRecorder is the mock recorder for MockCommandHandlerInterface.
type MockCommandHandlerInterfaceMockRecorder struct {
	mock *MockCommandHandlerInterface
}

// NewMockCommandHandlerInterface creates a new mock instance.
func NewMockCommandHandlerInterface(ctrl *gomock.Controller) *MockCommandHandlerInterface {
	mock := &MockCommandHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockCommandHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandHandlerInterface) EXPECT() *MockCommandHandlerInterfaceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockCommandHandlerInterface) Handle(arg0 context.Context, arg1 create_sku.Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCommandHandlerInterfaceMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCommandHandlerInterface)(nil).Handle), arg0, arg1)
}

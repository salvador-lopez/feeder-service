// Code generated by MockGen. DO NOT EDIT.
// Source: feeder-service/internal/sku/infrastructure/io/socket/tcp/sku_reader (interfaces: SkuReader)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSkuReader is a mock of SkuReader interface.
type MockSkuReader struct {
	ctrl     *gomock.Controller
	recorder *MockSkuReaderMockRecorder
}

// MockSkuReaderMockRecorder is the mock recorder for MockSkuReader.
type MockSkuReaderMockRecorder struct {
	mock *MockSkuReader
}

// NewMockSkuReader creates a new mock instance.
func NewMockSkuReader(ctrl *gomock.Controller) *MockSkuReader {
	mock := &MockSkuReader{ctrl: ctrl}
	mock.recorder = &MockSkuReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkuReader) EXPECT() *MockSkuReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSkuReader) Read(arg0 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSkuReaderMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSkuReader)(nil).Read), arg0)
}

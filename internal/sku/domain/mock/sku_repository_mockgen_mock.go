// Code generated by MockGen. DO NOT EDIT.
// Source: feeder-service/internal/sku/domain (interfaces: SkuRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "feeder-service/internal/sku/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSkuRepository is a mock of SkuRepository interface.
type MockSkuRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSkuRepositoryMockRecorder
}

// MockSkuRepositoryMockRecorder is the mock recorder for MockSkuRepository.
type MockSkuRepositoryMockRecorder struct {
	mock *MockSkuRepository
}

// NewMockSkuRepository creates a new mock instance.
func NewMockSkuRepository(ctrl *gomock.Controller) *MockSkuRepository {
	mock := &MockSkuRepository{ctrl: ctrl}
	mock.recorder = &MockSkuRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkuRepository) EXPECT() *MockSkuRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockSkuRepository) Find(arg0 context.Context, arg1 *domain.SkuId) (*domain.Sku, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*domain.Sku)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSkuRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSkuRepository)(nil).Find), arg0, arg1)
}

// Save mocks base method.
func (m *MockSkuRepository) Save(arg0 context.Context, arg1 *domain.Sku) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSkuRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSkuRepository)(nil).Save), arg0, arg1)
}
